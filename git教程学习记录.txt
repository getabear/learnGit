git仓库的两种创建方式
	1. git init
	2. git clone
  
git命令：
	1. git add .   将本文件夹种所有文件添加到暂存区(支持通配符，比如 git add *.txt)
	2. git status 可以查看目前的各种状态信息， 如所在分支， 未跟踪的文件，提交到暂存区的文件等
		2.1 git status -s 显示简略信息 （-s short）
	3. git log 查看提交的历史信息（git log oneline 可以查看精简信息,也就是精简到一行）
	4. git commit 将暂存区的文件提交到本地仓库
		git commit -am 将文件添加到暂存区，并将暂存区的内容提交到本地仓库
	5. git reset 命令
		5.1 git reset --soft   这种方法回退版本会将暂存区和工作区的内容保留
		5.2 git reset --hard 这种方法会将暂存区和工作区的内容都删除
		5.3 git reset --mixed 种种方法会保留工作区的内容， 删除暂存区的内容（git reset命令默认就是这种方式）
	6.git ls-files 查看暂存区的内容
	7. git reflog 查看操作历史
	8. git diff 默认查看工作区和暂存区之间的改动
		8.1 git diff HEAD 比较工作区和仓库之间的差异
		8.2 git diff --cached 比较暂存区和仓库之间的差异
		8.3 git diff <id1> <id2> 比较两个版本之间的差异

	9. git rm 会删除工作区和暂存区的文件
		git rm --cached 删除暂存区的文件，但是不删除工作区的文件

	10. git push 将本地仓库推送到远程仓库
		git push -u origin master:main
		表示将本地仓库和远程仓库origin关联起来，master:main表示将本地分支的master与远程仓库的main分支关联起来
	11. git pull 将远程仓库拉取到本地
		git pull origin main
		表示拉取远程仓库的main分支
	12. git remote -v 查看当前仓库所对应的远程仓库别名和地址， 例如
		$ git remote -v
		origin  https://github.com/getabear/learnGit.git (fetch)
		origin  https://github.com/getabear/learnGit.git (push)
		这几条命令说明我们远程仓库的别名是origin，对应地址是https://github.com/getabear/learnGit.git

	13. git fetch 也会拉取远程分支的修改，但是他不像git pull命令一样，会进行与本地分支进行合并的操作
	14. git branch 查看所有的分支
		git branch <name> 创建一个分支
		git branch -d 删除分支
	15. git checkout <name> 切换分支
		git switch <name> 切换分支 新功能，避免歧义

	16. git merge dev （假设当前在master分支）表示将dev分支合并到master分支
	17. git merge --abort 来终止合并
	18. git rebase 找到两个分支的最近祖先，然后合并。 例如：
		git checkout dev 
		git rebase master
		上面两条命令就是将目前的dev分支直接连接到master分支上（以master为基础（base））
		git checkout master
		git rebase dev
		上面两条命令就是将目前的master分支直接连接到dev分支上（以dev为基础（base）)
	19.  git tag 添加版本号
		git tag -a v1.0 -m "完结版本"
	20.  git push origin --tags 将本地的标签推送到远程仓库
	21.  git branch -a 查看所有分支列表（包括远程的分支）
	22.  git checkout -b feature origin/feature 拉取远程的分支 origin/feature，在本地叫feature 的分支
	23.  git checkout -t origin/feature 拉取远程的分支origin/feature，本地分支名核远程相同
.gitignore文件
	需要注意的是 已经添加到暂存区的文件就算后面添加到.gitignore中后， git仍然可以监测到变化
	.gitignore文件使用glob来进行文件的匹配，下面简单举例子
	*.a 表示忽略所有的.a文件
	！nihao.a 第一条命令忽略了所有.a文件，这条在第一条的基础上保留nihao.a文件，也就是忽略所有.a文件，除了nihao.a
	/hello 表示忽略当前目录下的hello文件
	build/ 表示忽略所有目录下的build文件夹
